'use strict';var f=this;
function g(e){const l={enter:(a,b)=>{a.children.length||b.push(a)}},m={enter:(a,b)=>{b.push(a)}};class h{constructor(){this.parent=null;this.children=[]}addNode(a){if(this.hasAncestor(a))throw Error("The node added is one of the ancestors of current one.");this.children.push(a);a.parent=this;return this}depth(a=this){if(a.children.length){const b=[];for(const d of a.children)d&&b.push(this.depth(d));a=0;for(const d of b)a=Math.max(a,d);return 1+a}return 1}findLeaves(){const a=[];this.traverse(l,a);
return a}findRoot(a=this){return a.parent?this.findRoot(a.parent):a}hasAncestor(a){return this.parent?this.parent===a?!0:this.parent.hasAncestor(a):!1}removeNode(a){this.children.includes(a)&&(this.children.splice(this.children.indexOf(a),1),a.parent=null);return this}traverse(a,b){a.enter&&a.enter(this,b);a.visit&&a.visit(this,b);for(const d of this.children)d&&d.traverse(a,b);a.leave&&a.leave(this,b);return this}toArray(){const a=[];this.traverse(m,a);return a}}class k extends h{constructor(){super(...arguments);
this.parent=null;this.children=[]}}let c;class n extends k{constructor(){super(...arguments);this.children=[null,null];this.parent=null}addNode(a){if(this.compare(a))if(this.children[1])this.children[1].addNode(a);else{if(this.hasAncestor(a))throw Error("The node added is one of the ancestors of current one.");this.children[1]=a;a.parent=this}else if(this.children[0])this.children[0].addNode(a);else{if(this.hasAncestor(a))throw Error("The node added is one of the ancestors of current one.");this.children[0]=
a;a.parent=this}return this}get left(){return this.children[0]}set left(a){(c=this.children[0])&&this.removeNode(c);if(this.children[0]=a)a.parent=this}removeNode(a){this.children.includes(a)&&(this.children[this.children.indexOf(a)]=null,a.parent=null);return this}get right(){return this.children[1]}set right(a){(c=this.children[1])&&this.removeNode(c);if(this.children[1]=a)a.parent=this}traverseInOrder(a,b){c=this.children[0];a.enter&&a.enter(this,b);c&&c.traverseInOrder(a,b);a.visit&&a.visit(this,
b);(c=this.children[1])&&c.traverseInOrder(a,b);a.leave&&a.leave(this,b);return this}traversePostOrder(a,b){c=this.children[0];a.enter&&a.enter(this,b);c&&c.traversePostOrder(a,b);(c=this.children[1])&&c.traversePostOrder(a,b);a.visit&&a.visit(this,b);a.leave&&a.leave(this,b);return this}traversePreOrder(a,b){c=this.children[0];a.enter&&a.enter(this,b);a.visit&&a.visit(this,b);c&&c.traversePreOrder(a,b);(c=this.children[1])&&c.traversePreOrder(a,b);a.leave&&a.leave(this,b);return this}}e.AbstractBinaryTreeNode=
n;e.AbstractTreeNode=h;e.TreeNode=k;Object.defineProperty(e,"__esModule",{value:!0})}"object"===typeof exports&&"undefined"!==typeof module?g(exports):"function"===typeof define&&define.g?define(["exports"],g):(f="undefined"!==typeof globalThis?globalThis:f||self,g(f.Tree={}));
