'use strict';var h=this;
function k(l){const q={enter:(a,d)=>{a.children.length||d.push(a)}},r={enter:(a,d)=>{d.push(a)}},n=(a=Object)=>{var d;return d=class f extends a{constructor(){super(...arguments);this.parent=null;this.children=[]}static addNode(b,c){if(f.hasAncestor(b,c))throw Error("The node added is one of the ancestors of current one.");b.children.push(c);return c.parent=b}static depth(b){if(b.children.length){const c=[];for(const g of b.children)g&&c.push(this.depth(g));b=0;for(const g of c)b=Math.max(b,g);return 1+
b}return 1}static findLeaves(b){const c=[];f.traverse(b,q,c);return c}static findRoot(b){return b.parent?this.findRoot(b.parent):b}static hasAncestor(b,c){return b.parent?b.parent===c?!0:f.hasAncestor(b.parent,c):!1}static removeNode(b,c){b.children.includes(c)&&(b.children.splice(b.children.indexOf(c),1),c.parent=null);return b}static toArray(b){const c=[];f.traverse(b,r,c);return c}static traverse(b,c,g){c.enter&&c.enter(b,g);c.visit&&c.visit(b,g);for(const m of b.children)m&&f.traverse(m,c,g);
c.leave&&c.leave(b,g);return b}addNode(b){return f.addNode(this,b)}depth(){return f.depth(this)}findLeaves(){return f.findLeaves(this)}findRoot(){return f.findRoot(this)}hasAncestor(b){return f.hasAncestor(this,b)}removeNode(b){return f.removeNode(this,b)}toArray(){return f.toArray(this)}traverse(b,c){return f.traverse(this,b,c)}},d.mixin=n,d};var p=n(Object);let e;class t extends p{constructor(){super(...arguments);this.children=[null,null];this.parent=null}addNode(a){if(this.compare(a))if(this.children[1])this.children[1].addNode(a);
else{if(this.hasAncestor(a))throw Error("The node added is one of the ancestors of current one.");this.children[1]=a;a.parent=this}else if(this.children[0])this.children[0].addNode(a);else{if(this.hasAncestor(a))throw Error("The node added is one of the ancestors of current one.");this.children[0]=a;a.parent=this}return this}get left(){return this.children[0]}set left(a){(e=this.children[0])&&this.removeNode(e);if(this.children[0]=a)a.parent=this}removeNode(a){this.children.includes(a)&&(this.children[this.children.indexOf(a)]=
null,a.parent=null);return this}get right(){return this.children[1]}set right(a){(e=this.children[1])&&this.removeNode(e);if(this.children[1]=a)a.parent=this}traverseInOrder(a,d){e=this.children[0];a.enter&&a.enter(this,d);e&&e.traverseInOrder(a,d);a.visit&&a.visit(this,d);(e=this.children[1])&&e.traverseInOrder(a,d);a.leave&&a.leave(this,d);return this}traversePostOrder(a,d){e=this.children[0];a.enter&&a.enter(this,d);e&&e.traversePostOrder(a,d);(e=this.children[1])&&e.traversePostOrder(a,d);a.visit&&
a.visit(this,d);a.leave&&a.leave(this,d);return this}traversePreOrder(a,d){e=this.children[0];a.enter&&a.enter(this,d);a.visit&&a.visit(this,d);e&&e.traversePreOrder(a,d);(e=this.children[1])&&e.traversePreOrder(a,d);a.leave&&a.leave(this,d);return this}}l.BinaryTreeNode=t;l.TreeNode=p;Object.defineProperty(l,"__esModule",{value:!0})}
"object"===typeof exports&&"undefined"!==typeof module?k(exports):"function"===typeof define&&define.g?define(["exports"],k):(h="undefined"!==typeof globalThis?globalThis:h||self,k(h.Tree={}));
